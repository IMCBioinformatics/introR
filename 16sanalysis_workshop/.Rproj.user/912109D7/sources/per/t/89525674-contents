---
title: "Skin Microbiome Analysis"
author: "Hena R. Ramay"
date: "`r format(Sys.time(), '%B %d, %Y')`"
output: 
  html_document:
    theme: yeti
    highlight: kate
    toc: true
    toc_float: 
      collapsed: false
    toc_depth: 4
    code_folding: hide
editor_options: 
  chunk_output_type: console
---

  <!-- <center> -->
  <!-- <h4> Hena R. Ramay, PhD (hena.ramay\@ucalgary.ca)</h4> -->
  <!-- <h5> International Microbiome Centre Bioinformatics Services</h5> -->
  <!-- <h5> University of Calgary, Calgary, CA</h5> -->
  <!-- <center> -->
  <!-- </center> -->
  <!-- </center> -->
  
  <center>
  
  ```{r knitrOptions, message=FALSE, echo=FALSE,results='hide'}
library(knitr)
opts_chunk$set(warning=FALSE, message=FALSE, cache=FALSE, echo=FALSE, fig.width=9, fig.height=5.5)
```

```{r initialize,results='hide'}
library(plotly)
library(phyloseq)
library(vegan)
library(ggplot2)
library(ggrepel)
library(DT)
#library(biom)
library(readr)
library(Biostrings)
library(lubridate)
library(plyr)
library(dplyr)
library(tidyverse)
#library(webshot)
library(limma)
library(reshape2)
library(DESeq2)
theme_set(theme_bw())
library(stringr)
dyn.load('/Library/Java/JavaVirtualMachines/jdk1.8.0_111.jdk/Contents/Home/jre/lib/server/libjvm.dylib')
#require(rJava)
#library(xlsx)
library(gridExtra)
source("../../../Reimer/aspartame/second_run/greenway_multqc.R")


datatable2<-function(res,...)
{
  return(datatable(res,options=list(pageLength = 10,dom = 'lBfrtip',
                                    buttons = c('copy', 'csv', 'excel', 'print'),
                                    initComplete = JS(
                                      "function(settings, json) {",
                                      "$(this.api().table().header()).css({'background-color': '#595757', 'color': '#fff'});",
                                      "}")),extensions = 'Buttons',...
  ))
  
}


plotly_bar_paper <- function(data,title,legend)
{
  #  data$type <-
  #    factor(data$type, levels = unique(data$type)[order(data$Abundance, decreasing = TRUE)])
  cols = colp(length(levels(data$type)))
  title = title
  #ord<-data$Sample[order(as.numeric(strsplit2(data$Sample,split = 'S')[,2]))]
  ord<-unique(data$Sample[order(as.numeric(str_replace_all(data$Sample, "[[:alpha:]]", "")))])
  #print(ord)
  p<-plot_ly(data) %>%
    add_trace(
      x = ~ Sample,
      y = ~ Abundance,
      type = 'bar',
      colors = cols,
      showlegend = legend,
      legendgroup =  ~ type,
      #visible = "legendonly",
      color =  ~ type#,
      #marker = list(line = list(color = "black", width = 0.5))
    ) %>%
    layout(
      yaxis = list(title = 'Abundance'),
      xaxis = list(title=title,titlefont=list(size=7),showticklabels = FALSE,categoryorder = "array", categoryarray =ord,tickfont=list(size=7)),
      barmode = 'stack',
      margin = m,
      hovermode="closest"
      
    )
  
  #p$legend<-levels(data$type)
  return(p)
}


input_data="~/projects/Reimer/aspartame/second_run/output/"
output_data="results/"
output_plots="plots/"
dir.create(output_data)
dir.create(output_plots)
#Set color palette
colp=colorRampPalette(brewer.pal(9, "Set1") )
title_f= list(#color = '#9f3a3a',
  family = 'Sans-Serif',
  size = 18)
pval_f= list(#color = '#9f3a3a',
  family = 'Sans-Serif',
  size = 12)


# m <- list(
#   l = 50,
#   r = 50,
#   b = 100,
#   t = 100,
#   pad = 4
# )
m=c(3,3,3,3)


read.csv("../sibley_MCMASTER SEQUENCING LEGEND.csv")->sample_info
colnames(sample_info)<-c("sample_type","sample_id")
sample_info$sample_pairs<-sample_info$sample_type

sample_info<-separate(data = sample_info,col = 1,into = c("dummy","Group"),sep = "^[0-9]+")
sample_info<-separate(data = sample_info,col = "sample_pairs",into = c("Pairs","dummy2"),sep = "[A-Z]+$")
rownames(sample_info)<-sample_info$sample_id
#sample_info<-sample_info[,-c("dummy","dummy2")]
ps<-import_biom(BIOMfilename = "../../../../Dropbox/McMaster Skin Microbiome Sequencing/SIbley/picked_otus_abundantotu_sibley/otu_table_rdpgenus_n1_noRoot.biom",treefilename = "../../../../Dropbox/McMaster Skin Microbiome Sequencing/SIbley/picked_otus_abundantotu_sibley/rep_phylo.tre")

ps<-merge_phyloseq(ps,sample_data(sample_info))

source("../../../Reimer/aspartame/second_run/greenway_multqc.R")
colp=colorRampPalette(brewer.pal(9, "Set1") )

colnames(ps@tax_table)<-c("Kingdom","Phylum","Class","Order","Family","Genus")

ps@tax_table[is.na(ps@tax_table[,5]),5]<-"f__"
ps@tax_table[is.na(ps@tax_table[,6]),6]<-"g__"

```
## Taxonomy bar plots

```{r barplots}

data.frame(t(relative_abund(ps,"Phylum")),Group=sample_data(ps)$Group)->phylum
#phylum$time<-factor(phylum$time)
phylum$Group<-factor(phylum$Group)
phylum$type<-"phylum"
melt(phylum)-> phylum

data.frame(t(relative_abund(ps,"Family")),Group=sample_data(ps)$Group)->family
#family$time<-factor(family$time)
family$type<-"family"
family$Group<-factor(family$Group)
melt(family)-> family

data.frame(t(relative_abund(ps,"Genus")),Group=sample_data(ps)$Group)->genus
genus$Group<-factor(genus$Group)
genus$type<-"genus"
melt(genus)-> genus


rbind(genus, family, phylum)->data
#data<-data[,-c(2,3)]
colnames(data)<-c("Group","level","Taxa","Abundance")
data$Taxa<-str_remove_all(data$Taxa,pattern = "X.")
data$Taxa<-str_remove_all(data$Taxa,pattern = ".$")

data$Group=strsplit2(x = data$Group,split = "_")[,1]
#levels(data$Time)<-c("Baseline","Week 16","Week 52")
cutoff=0.01

data<-split(data,f=data$level)
mean_plots<-lapply(data,function(x){
  x %>%
dplyr::group_by(Group,Taxa) %>% 
dplyr::filter(sum(Abundance) > cutoff) %>% ungroup() %>%
dplyr::group_by(Group, level,Taxa) %>% 
dplyr::summarise(`Relative Abundance` = mean(Abundance)) %>% 
ggplot(aes(x = Group, y = `Relative Abundance`)) +
geom_col(aes(fill = Taxa)) + 
facet_wrap(~level, scales = "free_x") +
scale_fill_manual(values = colp(71)) +
    ylab("Relative Abundance")+xlab("")#+theme(legend.position="none")
  })

 mean_plots[[3]]
 
ggsave(filename = "taxa_plots_family.pdf",plot = mean_plots[[1]], width = 9, height = 6)

ggsave(filename = "taxa_plots_phylum.pdf",plot = mean_plots[[3]], width = 9, height = 6)

```

## Alpha Diversity

```{r alpha_diversity}

richness<-estimate_richness(ps)
richness$group<-ps@sam_data$Group
write_csv(x = richness,path = "alpha_diversity_GF.csv")
#pdf("Shannon_diversity_GF.pdf")
ggplot(richness,aes(x=group,y=Shannon,color=group,fill=group)) + geom_boxplot(alpha = 0.80)+ scale_color_manual(values=colp(10)) + scale_fill_manual(values=colp(10))
#dev.off()

#pdf(file = "Simpson_diversity_GF.pdf")
ggplot(richness,aes(x=group,y=Simpson,color=group,fill=group)) + geom_boxplot(alpha = 0.80)+ scale_color_manual(values=colp(10)) + scale_fill_manual(values=colp(10))
#dev.off()

#pdf(file = "Fisher_diversity_GF.pdf")
ggplot(richness,aes(x=group,y=Fisher,color=group,fill=group)) + geom_boxplot(alpha = 0.80)+ scale_color_manual(values=colp(10)) + scale_fill_manual(values=colp(10))
#dev.off()

```

## Beta Diversity

```{r, beta}
p<-ps %>%
transform_sample_counts(., function(x) log(1 + x)) %>%
plot_ordination(., ordinate(., method="PCoA", distance="bray"),
label="Pairs",color="Group",title="Bray NMDS")+ scale_colour_manual(values=colp(10)) + geom_point() + geom_label(label=ps@sam_data$Pairs)#%>% #+ theme_bw() 
p +theme(legend.position="bottom")+theme(legend.title=element_blank())
```


```{r,eval=F}
library(DirichletMultinomial)
1
fit <- mclapply(1:10, dmn, count=ps@otu_table, verbose=TRUE)
lplc <- sapply(fit, laplace)
plot(lplc, type="b", xlab="Number of Dirichlet Components",ylab="Model Fit")
mixturewt(best) %>% 
  rownames_to_column("Cluster") %>% 
  mutate_if(is.numeric, round, digits = 2)
cl = mixture(best, assign = TRUE)

```

## DESeq2

As there are paired samples the model used here was ~ Group + Patient_id. Only one taxa (g__Staphylococcus) was found to be significantly different with a log2FoldChange of 4.8 and p.adjusted value of 4.5e-07.

```{r, deseq2 }

library("reshape2")
library("DESeq2")

ps_g<-tax_glom(ps,taxrank = "Genus")
ps_dds <- phyloseq_to_deseq2(ps_g, design = ~ Group + Pairs)


# geometric mean, set to zero when all coordinates are zero
geo_mean_protected <- function(x) {
  if (all(x == 0)) {
    return (0)
  }
  exp(mean(log(x[x != 0])))
}

geoMeans <- apply(counts(ps_dds), 1, geo_mean_protected)
ps_dds <- estimateSizeFactors(ps_dds, geoMeans = geoMeans)
ps_dds <- estimateDispersions(ps_dds)
diagdds = DESeq(ps_dds, test="Wald", fitType="parametric")
```

```{r}
#abund <- getVarianceStabilizedData(ps_dds)
res<-results(diagdds,name = "Group_T_vs_N")

res_idx<-which(res$padj <= 0.05)
```
```{r}
#success<-as.data.frame(t(assay(ps_dds)[res_idx,])) 
#success$Group<-ps@sam_data$Group
ggplot(,aes(x=ps@sam_data$Group,y=assay(ps_dds)[res_idx,], color=ps@sam_data$Group,fill=ps@sam_data$Group)) + geom_bar(stat="identity") + scale_colour_manual(values=colp(10)) +scale_fill_manual(values=colp(10))+ theme(legend.position="bottom")+theme(legend.title=element_blank())+xlab("Groups") +ylab("Abundance_counts")

```



